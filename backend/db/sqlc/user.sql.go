// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  password,
  email
) VALUES (
  $1, $2, $3
)
RETURNING user_id, username, password, profile_picture, biography, email, created_at
`

type CreateUserParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Biography,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password, profile_picture, biography, email, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Biography,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const searchUsers = `-- name: SearchUsers :many
SELECT profile_picture, username FROM users
WHERE user_id <> $1
ORDER BY RANDOM()
LIMIT 10
`

type SearchUsersRow struct {
	ProfilePicture sql.NullString `json:"profile_picture"`
	Username       sql.NullString `json:"username"`
}

func (q *Queries) SearchUsers(ctx context.Context, userID int32) ([]SearchUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchUsersRow{}
	for rows.Next() {
		var i SearchUsersRow
		if err := rows.Scan(&i.ProfilePicture, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET profile_picture = $1, biography = $2
WHERE user_id = $3
RETURNING 1
`

type UpdateUserParams struct {
	ProfilePicture sql.NullString `json:"profile_picture"`
	Biography      sql.NullString `json:"biography"`
	UserID         int32          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ProfilePicture, arg.Biography, arg.UserID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
